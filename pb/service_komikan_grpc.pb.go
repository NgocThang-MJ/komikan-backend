// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: service_komikan.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Komikan_CreateUser_FullMethodName    = "/pb.Komikan/CreateUser"
	Komikan_LoginUser_FullMethodName     = "/pb.Komikan/LoginUser"
	Komikan_CreateHistory_FullMethodName = "/pb.Komikan/CreateHistory"
	Komikan_GetHistories_FullMethodName  = "/pb.Komikan/GetHistories"
	Komikan_UpdateHistory_FullMethodName = "/pb.Komikan/UpdateHistory"
	Komikan_UpsertHistory_FullMethodName = "/pb.Komikan/UpsertHistory"
)

// KomikanClient is the client API for Komikan service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KomikanClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
	CreateHistory(ctx context.Context, in *CreateHistoryRequest, opts ...grpc.CallOption) (*History, error)
	GetHistories(ctx context.Context, in *GetHistoriesRequest, opts ...grpc.CallOption) (*HistoriesResponse, error)
	UpdateHistory(ctx context.Context, in *UpdateHistoryRequest, opts ...grpc.CallOption) (*UpdateHistoryResponse, error)
	UpsertHistory(ctx context.Context, in *CreateHistoryRequest, opts ...grpc.CallOption) (*CreateHistoryResponse, error)
}

type komikanClient struct {
	cc grpc.ClientConnInterface
}

func NewKomikanClient(cc grpc.ClientConnInterface) KomikanClient {
	return &komikanClient{cc}
}

func (c *komikanClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, Komikan_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *komikanClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	out := new(LoginUserResponse)
	err := c.cc.Invoke(ctx, Komikan_LoginUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *komikanClient) CreateHistory(ctx context.Context, in *CreateHistoryRequest, opts ...grpc.CallOption) (*History, error) {
	out := new(History)
	err := c.cc.Invoke(ctx, Komikan_CreateHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *komikanClient) GetHistories(ctx context.Context, in *GetHistoriesRequest, opts ...grpc.CallOption) (*HistoriesResponse, error) {
	out := new(HistoriesResponse)
	err := c.cc.Invoke(ctx, Komikan_GetHistories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *komikanClient) UpdateHistory(ctx context.Context, in *UpdateHistoryRequest, opts ...grpc.CallOption) (*UpdateHistoryResponse, error) {
	out := new(UpdateHistoryResponse)
	err := c.cc.Invoke(ctx, Komikan_UpdateHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *komikanClient) UpsertHistory(ctx context.Context, in *CreateHistoryRequest, opts ...grpc.CallOption) (*CreateHistoryResponse, error) {
	out := new(CreateHistoryResponse)
	err := c.cc.Invoke(ctx, Komikan_UpsertHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KomikanServer is the server API for Komikan service.
// All implementations must embed UnimplementedKomikanServer
// for forward compatibility
type KomikanServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error)
	CreateHistory(context.Context, *CreateHistoryRequest) (*History, error)
	GetHistories(context.Context, *GetHistoriesRequest) (*HistoriesResponse, error)
	UpdateHistory(context.Context, *UpdateHistoryRequest) (*UpdateHistoryResponse, error)
	UpsertHistory(context.Context, *CreateHistoryRequest) (*CreateHistoryResponse, error)
	mustEmbedUnimplementedKomikanServer()
}

// UnimplementedKomikanServer must be embedded to have forward compatible implementations.
type UnimplementedKomikanServer struct {
}

func (UnimplementedKomikanServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedKomikanServer) LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedKomikanServer) CreateHistory(context.Context, *CreateHistoryRequest) (*History, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHistory not implemented")
}
func (UnimplementedKomikanServer) GetHistories(context.Context, *GetHistoriesRequest) (*HistoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistories not implemented")
}
func (UnimplementedKomikanServer) UpdateHistory(context.Context, *UpdateHistoryRequest) (*UpdateHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHistory not implemented")
}
func (UnimplementedKomikanServer) UpsertHistory(context.Context, *CreateHistoryRequest) (*CreateHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertHistory not implemented")
}
func (UnimplementedKomikanServer) mustEmbedUnimplementedKomikanServer() {}

// UnsafeKomikanServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KomikanServer will
// result in compilation errors.
type UnsafeKomikanServer interface {
	mustEmbedUnimplementedKomikanServer()
}

func RegisterKomikanServer(s grpc.ServiceRegistrar, srv KomikanServer) {
	s.RegisterService(&Komikan_ServiceDesc, srv)
}

func _Komikan_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KomikanServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Komikan_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KomikanServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Komikan_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KomikanServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Komikan_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KomikanServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Komikan_CreateHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KomikanServer).CreateHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Komikan_CreateHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KomikanServer).CreateHistory(ctx, req.(*CreateHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Komikan_GetHistories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KomikanServer).GetHistories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Komikan_GetHistories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KomikanServer).GetHistories(ctx, req.(*GetHistoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Komikan_UpdateHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KomikanServer).UpdateHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Komikan_UpdateHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KomikanServer).UpdateHistory(ctx, req.(*UpdateHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Komikan_UpsertHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KomikanServer).UpsertHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Komikan_UpsertHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KomikanServer).UpsertHistory(ctx, req.(*CreateHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Komikan_ServiceDesc is the grpc.ServiceDesc for Komikan service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Komikan_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Komikan",
	HandlerType: (*KomikanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _Komikan_CreateUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _Komikan_LoginUser_Handler,
		},
		{
			MethodName: "CreateHistory",
			Handler:    _Komikan_CreateHistory_Handler,
		},
		{
			MethodName: "GetHistories",
			Handler:    _Komikan_GetHistories_Handler,
		},
		{
			MethodName: "UpdateHistory",
			Handler:    _Komikan_UpdateHistory_Handler,
		},
		{
			MethodName: "UpsertHistory",
			Handler:    _Komikan_UpsertHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_komikan.proto",
}
